import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-C95VGJ3p.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="相关错误" tabindex="-1"><a class="header-anchor" href="#相关错误"><span>相关错误</span></a></h1><h2 id="布局组件类错误" tabindex="-1"><a class="header-anchor" href="#布局组件类错误"><span>布局组件类错误</span></a></h2><h3 id="未使用materialapp作为基组件" tabindex="-1"><a class="header-anchor" href="#未使用materialapp作为基组件"><span>未使用MaterialApp作为基组件</span></a></h3><ul><li>如果想要使用scaffold脚手架需要使用MaterialApp作为基组件, 且对于许多组件而言必须使用scaffold脚手架</li></ul><h3 id="未对flex布局组件设置大小约束" tabindex="-1"><a class="header-anchor" href="#未对flex布局组件设置大小约束"><span>未对flex布局组件设置大小约束</span></a></h3><ul><li>对于flex系列的组件而言,本身是没有大小约束的,也就是说,他们本身会撑满父容器,如果父容器也是flex组件就会出现大小未指定问题</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): EXCEPTION CAUGHT BY RENDERING LIBRARY</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): The following assertion was thrown during </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">performResize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): Vertical viewport was given unbounded height.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): Viewports expand in the scrolling direction to fill their container.In this case, a vertical</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): viewport was given an unlimited amount of vertical space in which to expand. This situation</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): typically happens when a scrollable widget is nested inside another scrollable widget.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): If this widget is always nested in a scrollable widget there is no need to use a viewport because</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): there will always be enough vertical space </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> the children. In this case, consider using a Column</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): instead. Otherwise, consider using the “shrinkWrap” property (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">or</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ShrinkWrappingViewport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) to size</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/flutter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4625</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): the height of the viewport to the sum of the heights of its children.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="expanded的错误使用-incorrect-use-of-parentdatawidget" tabindex="-1"><a class="header-anchor" href="#expanded的错误使用-incorrect-use-of-parentdatawidget"><span>Expanded的错误使用:Incorrect use of ParentDataWidget</span></a></h3><ul><li>Expanded、Flexible只在Row、Column等组件内使用</li></ul><h2 id="dart错误" tabindex="-1"><a class="header-anchor" href="#dart错误"><span>dart错误</span></a></h2><h3 id="有关asnyc的使用" tabindex="-1"><a class="header-anchor" href="#有关asnyc的使用"><span>有关asnyc的使用</span></a></h3><ul><li>对于添加了asnyc的函数如果需要等待运行结果返回值,需要添加await关键字</li></ul><h2 id="getx" tabindex="-1"><a class="header-anchor" href="#getx"><span>Getx</span></a></h2><h3 id="getx中两个context的使用" tabindex="-1"><a class="header-anchor" href="#getx中两个context的使用"><span>Getx中两个context的使用</span></a></h3><ul><li>对于Getx中的两个context,如果需要弹窗应该使用overlayContext</li></ul>`,15)]))}const k=s(t,[["render",l],["__file","经典的错误.html.vue"]]),d=JSON.parse('{"path":"/note/flutter/%E7%BB%8F%E5%85%B8%E7%9A%84%E9%94%99%E8%AF%AF.html","title":"相关错误","lang":"zh-CN","frontmatter":{"description":"相关错误 布局组件类错误 未使用MaterialApp作为基组件 如果想要使用scaffold脚手架需要使用MaterialApp作为基组件, 且对于许多组件而言必须使用scaffold脚手架 未对flex布局组件设置大小约束 对于flex系列的组件而言,本身是没有大小约束的,也就是说,他们本身会撑满父容器,如果父容器也是flex组件就会出现大小未指定...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/note-vuepress/note/flutter/%E7%BB%8F%E5%85%B8%E7%9A%84%E9%94%99%E8%AF%AF.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"相关错误"}],["meta",{"property":"og:description","content":"相关错误 布局组件类错误 未使用MaterialApp作为基组件 如果想要使用scaffold脚手架需要使用MaterialApp作为基组件, 且对于许多组件而言必须使用scaffold脚手架 未对flex布局组件设置大小约束 对于flex系列的组件而言,本身是没有大小约束的,也就是说,他们本身会撑满父容器,如果父容器也是flex组件就会出现大小未指定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"相关错误\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"布局组件类错误","slug":"布局组件类错误","link":"#布局组件类错误","children":[{"level":3,"title":"未使用MaterialApp作为基组件","slug":"未使用materialapp作为基组件","link":"#未使用materialapp作为基组件","children":[]},{"level":3,"title":"未对flex布局组件设置大小约束","slug":"未对flex布局组件设置大小约束","link":"#未对flex布局组件设置大小约束","children":[]},{"level":3,"title":"Expanded的错误使用:Incorrect use of ParentDataWidget","slug":"expanded的错误使用-incorrect-use-of-parentdatawidget","link":"#expanded的错误使用-incorrect-use-of-parentdatawidget","children":[]}]},{"level":2,"title":"dart错误","slug":"dart错误","link":"#dart错误","children":[{"level":3,"title":"有关asnyc的使用","slug":"有关asnyc的使用","link":"#有关asnyc的使用","children":[]}]},{"level":2,"title":"Getx","slug":"getx","link":"#getx","children":[{"level":3,"title":"Getx中两个context的使用","slug":"getx中两个context的使用","link":"#getx中两个context的使用","children":[]}]}],"readingTime":{"minutes":1.19,"words":356},"filePathRelative":"note/flutter/经典的错误.md","excerpt":"\\n<h2>布局组件类错误</h2>\\n<h3>未使用MaterialApp作为基组件</h3>\\n<ul>\\n<li>如果想要使用scaffold脚手架需要使用MaterialApp作为基组件, 且对于许多组件而言必须使用scaffold脚手架</li>\\n</ul>\\n<h3>未对flex布局组件设置大小约束</h3>\\n<ul>\\n<li>对于flex系列的组件而言,本身是没有大小约束的,也就是说,他们本身会撑满父容器,如果父容器也是flex组件就会出现大小未指定问题</li>\\n</ul>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): EXCEPTION CAUGHT BY RENDERING LIBRARY</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): The following assertion was thrown during </span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">performResize</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">():</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): Vertical viewport was given unbounded height.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): Viewports expand in the scrolling direction to fill their container.In this case, a vertical</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): viewport was given an unlimited amount of vertical space in which to expand. This situation</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): typically happens when a scrollable widget is nested inside another scrollable widget.</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): If this widget is always nested in a scrollable widget there is no need to use a viewport because</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): there will always be enough vertical space </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">for</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> the children. In this case, consider using a Column</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): instead. Otherwise, consider using the “shrinkWrap” property (</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">or</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> a</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> ShrinkWrappingViewport</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) to size</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">I/flutter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ( </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">4625</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">): the height of the viewport to the sum of the heights of its children.</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,d as data};
