import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as n}from"./app-De620kUC.js";const e="/note-vuepress/assets/image-DM4PoKA3.png",t={};function h(k,i){return n(),a("div",null,i[0]||(i[0]=[l('<h1 id="cmake" tabindex="-1"><a class="header-anchor" href="#cmake"><span>cmake</span></a></h1><ul><li><a href="https://subingwen.cn/tags/cmake/" target="_blank" rel="noopener noreferrer">cmake 教程</a></li></ul><h2 id="1-概述" tabindex="-1"><a class="header-anchor" href="#1-概述"><span>1. 概述</span></a></h2><ul><li><p>cmake 是一个项目构建工具，并且是跨平台的。关于项目构建我们所熟知的还有Makefile（通过 make 命令进行项目的构建），大多是IDE软件都集成了make，比如：VS 的 nmake、linux 下的 GNU make、Qt 的 qmake等，如果自己动手写 makefile，会发现，makefile 通常依赖于当前的编译平台，而且编写 makefile 的工作量比较大，解决依赖关系时也容易出错。</p></li><li><p>cmake 允许开发者指定整个工程的编译流程，根据编译平台，自动生成本地化的Makefile和工程文件，最后用户只需make编译即可，所以可以把cmake看成一款自动生成 Makefile的工具，其编译流程如下图： <img src="'+e+`" alt="编译流程" loading="lazy"></p><ul><li>蓝色虚线表示使用makefile构建项目的过程</li><li>红色实线表示使用cmake构建项目的过程</li></ul></li><li><p>介绍完cmake的作用之后，再来总结一下它的优点：</p><ul><li>跨平台</li><li>能够管理大型项目</li><li>简化编译构建过程和编译过程</li><li>可扩展：可以为 cmake 编写特定功能的模块，扩充 cmake 功能</li></ul></li><li><p>执行<code>cmake</code></p><ul><li><code>cmake</code>默认在本目录下寻找<code>cmakeLists.txt</code>执行</li><li>执行<code>cmake</code>会在当前目录下生成大量文件，因此一般使用指定路径的形式执行，将生成内容和代码分开存放</li></ul></li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建存放生成内容的文件夹，并在其中执行cmake</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果需要指定路径直接在后面添加相对路径</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ..</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Windows平台未生成Makefile时使用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ..</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;MinGW Makefiles&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>cmake</code>命令可选参数：</p><ul><li>-D[指定变量]：指定一些在<code>cmakeLists.txt</code>中使用的变量，比如：设置使用的C++标准<code>cmake CMakeLists.txt文件路径 -DCMAKE_CXX_STANDARD=17</code></li></ul></li><li><p>如果是<code>clion</code>编译，并且希望能在<code>Windows</code>平台下直接运行<code>exe</code>文件，需要在<code>cmakeLists.txt</code>中添加以下行：</p></li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 静态链接exe文件需求库libgcc</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_EXE_LINKER_FLAGS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;-static-libgcc -static-libstdc++&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="2-语法" tabindex="-1"><a class="header-anchor" href="#2-语法"><span>2. 语法</span></a></h2><h3 id="21-常见文档内容" tabindex="-1"><a class="header-anchor" href="#21-常见文档内容"><span>2.1 常见文档内容</span></a></h3><ul><li>常见基本文档构成</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可选，不加可能有警告，指定使用的 cmake 的最低版本</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义工程名称，并可指定工程的版本、工程描述、web主页地址、支持的语言（默认情况支持所有语言），如果不需要这些都是可以忽略的，只需要指定出工程名字即可</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CALC)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义工程会生成一个可执行程序</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># add_executable(可执行程序名 所有源文件名称)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 样式1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(app add.c div.c main.c mult.c sub.c)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 样式2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(app add.c;div.c;main.c;mult.c;sub.c)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注释</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 # 进行行注释，可以放在任何位置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#[[使用 #[[]]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">进行多行注释]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出：在cmake中可以为用户显示一条消息，该命令的名字为<code>message</code></li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># cmake在stdout上显示STATUS消息，在stderr上显示其他所有消息。CMake的GUI会在它的log区域显示所有消息</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (无) ：重要消息</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># STATUS ：非重要消息</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># WARNING：CMake 警告, 会继续执行</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># AUTHOR_WARNING：CMake 警告 (dev), 会继续执行</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># SEND_ERROR：CMake 错误, 继续执行，但是会跳过生成的步骤</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># FATAL_ERROR：CMake 错误, 终止所有处理过程</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;message to display&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出一般日志信息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(STATUS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;source path: \${PROJECT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出警告信息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(WARNING </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;source path: \${PROJECT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出错误信息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FATAL_ERROR </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;source path: \${PROJECT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="22-定义变量" tabindex="-1"><a class="header-anchor" href="#22-定义变量"><span>2.2 定义变量</span></a></h3><ul><li>在上面的例子中一共提供了5个源文件，假设这五个源文件需要反复被使用，每次都直接将它们的名字写出来确实是很麻烦，此时我们就需要定义一个变量，将文件名对应的字符串存储起来，在cmake里定义变量需要使用<code>set</code></li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># SET 指令的语法是：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [] 中的参数为可选项, 如不需要可以不写</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># VAR：变量名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># VALUE：变量值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(VAR [VALUE] [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CACHE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TYPE DOCSTRING [FORCE]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方式1: 各个源文件之间使用空格间隔</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># set(SRC_LIST add.c  div.c   main.c  mult.c  sub.c)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方式2: 各个源文件之间使用分号 ; 间隔</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(SRC_LIST add.c;div.c;main.c;mult.c;sub.c)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 用于空格和;是分隔符，需要时要用双引号包裹</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LIST a b c </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;d e f&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 默认结果是字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(app  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${SRC_LIST}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>重名和预定义问题</p></blockquote><ul><li><code>set</code>设置的名称<strong>可以重名</strong>，重名会被覆盖</li><li><code>cmake</code>有两种变量：<code>normal</code>和<code>cache</code><ul><li><code>normal</code>就是我们普通使用的变量,比如<code>set(VAR &quot;xyz&quot;)</code></li><li><code>cache</code>是<code>cmake</code>缓存的变量，比如<code>cmake -D</code>定义的变量，通常这些变量会存在<code>CMakeCache.txt</code>里面，第一次跑<code>cmake</code>的时候会生成这个文件</li><li>两种变量可以同名，当变量<code>\${VAR}</code>展开时，<code>cmake</code>会先尝试去查找<code>normal</code>变量，如果没找到定义则会去使用<code>cache</code>变量里查找</li><li>可以使用<code>set(VAR &quot;xyz&quot; CACHE STRINGH &quot;this is a comment of VAR&quot;)</code>设置一个<code>cache</code>变量。注意，这条指令并不会直接将<code>VAR</code>赋值，而是去查找是否已经有名字为<code>VAR</code>的<code>cache</code>变量，如果已经存在了则不会产生任何影响，如果不存在才会创建这个<code>cache</code>变量。如果想要强制将其值设置成<code>&quot;xyz&quot;</code>，可以在最后加<code>FORCE</code>参数<code>set(VAR &quot;xyz&quot; CACHE STRINGH &quot;this is a comment of VAR&quot; FORCE)</code></li></ul></li><li><code>set</code>设置的变量类似于提供相关键值对存储，对于函数直接赋值给之前未使用<code>set</code>定义的变量<strong>不会报错</strong></li></ul><blockquote><p>修改原有内置变量值</p></blockquote><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#增加-std=c++11</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CMAKE_CXX_STANDARD 11)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="23-cmake内置变量" tabindex="-1"><a class="header-anchor" href="#23-cmake内置变量"><span>2.3 cmake内置变量</span></a></h3><blockquote><p>cmake项目基本信息</p></blockquote><ul><li><code>CMAKE_PROJECT_NAME</code>：当前项目的名称</li><li><code>PROJECT_NAME</code>：最近通过project()命令激活的项目名称</li><li><strong><code>PROJECT_SOURCE_DIR</code></strong>：包含最顶层cmakeLists.txt文件的目录，即项目的源代码根目录</li><li><code>PROJECT_BINARY_DIR</code>：项目的构建目录，如果是外部构建，这将与CMAKE_BINARY_DIR不同</li><li><code>CMAKE_BUILD_TYPE</code>：指定构建类型（比如Release或Debug）</li><li><code>CMAKE_SOURCE_DIR</code>：项目的顶层源目录</li><li><strong><code>CMAKE_CURRENT_SOURCE_DIR</code></strong>：当前处理的cmakeLists.txt所在的目录</li><li><strong><code>EXECUTABLE_OUTPUT_PATH</code></strong>：重新定义生成的目标二进制可执行文件的存放位置</li><li><strong><code>LIBRARY_OUTPUT_PATH</code></strong>：重新定义生成的目标库文件的存放位置</li><li><code>CMAKE_BINARY_DIR</code>：项目的顶层构建目录</li><li><code>CMAKE_CURRENT_BINARY_DIR</code>：使用cmake命令的shell所在文件夹</li><li><code>CMAKE_INSTALL_PREFIX</code>：安装目录前缀</li><li><code>CMAKE_MODULE_PATH</code>：指定额外的cmake模块搜索路径</li><li><code>CMAKE_PREFIX_PATH</code>：用于查找库文件的路径前缀</li><li><code>CMAKE_COMMAND</code>：也就是CMake可运行文件本身的全路径</li></ul><blockquote><p>编译器和工具设置</p></blockquote><ul><li><code>CMAKE_C_COMPILER</code>：C编译器的完整路径</li><li><code>CMAKE_CXX_COMPILER</code>：C++编译器的完整路径</li><li><code>CMAKE_C_FLAGS</code>：C编译器的命令行选项</li><li><strong><code>CMAKE_CXX_FLAGS</code></strong>：C++编译器的命令行选项</li><li><code>CMAKE_VERBOSE_MAKEFILE</code>：如果为TRUE，构建过程将显示更多的信息</li><li><code>CMAKE_C_STANDARD</code>：指定使用的C标准</li><li><strong><code>CMAKE_CXX_STANDARD</code></strong>：指定使用的C++标准</li></ul><blockquote><p>系统信息</p></blockquote><ul><li><code>CMAKE_SYSTEM</code>：系统名称，例如Linux-2.6.32-573.el6.x86_64。</li><li><code>CMAKE_SYSTEM_NAME</code>：不包含版本的系统名称，如Linux、Windows。</li><li><code>CMAKE_SYSTEM_PROCESSOR</code>：目标系统的处理器，例如x86_64</li></ul><blockquote><p>特殊变量</p></blockquote><ul><li><code>CMAKE_VERSION</code>：cmake的版本</li><li><code>BUILD_SHARED_LIBS</code>：一个布尔变量，用于控制默认链接库的类型（静态或动态）</li></ul><blockquote><p>其他项目变量</p></blockquote><ul><li><code>PROJECT_NAME</code>：当前通过project()命令设置的项目名称</li><li><code>PROJECT_VERSION</code>：通过project()命令设置的项目版本</li><li><code>PROJECT_VERSION_MAJOR</code>：项目的主版本号</li><li><code>PROJECT_VERSION_MINOR</code>：项目的次版本号</li><li><code>PROJECT_VERSION_PATCH</code>：项目的补丁版本号</li><li><code>PROJECT_VERSION_TWEAK</code>：项目的微调版本号（如果指定）</li><li><code>PROJECT_DESCRIPTION</code>：项目的描述信息（需要cmake 3.9及以上版本）</li><li><code>PROJECT_HOMEPAGE_URL</code>：项目的主页URL（需要cmake 3.12及以上版本）</li></ul><blockquote><p>PROJECT_VERSION、PROJECT_VERSION_MAJOR、PROJECT_VERSION_MINOR、PROJECT_VERSION_PATCH和PROJECT_VERSION_TWEAK变量的设置依赖于project()命令中指定的版本信息</p></blockquote><h2 id="3-常用操作" tabindex="-1"><a class="header-anchor" href="#3-常用操作"><span>3. 常用操作</span></a></h2><h3 id="31-批量添加源文件和头文件" tabindex="-1"><a class="header-anchor" href="#31-批量添加源文件和头文件"><span>3.1 批量添加源文件和头文件</span></a></h3><ul><li>如果一个项目里边的源文件很多，在编写<code>CMakeLists.txt</code>文件的时候不可能将项目目录的各个文件一一罗列出来，这样太麻烦也不现实。所以，在<code>cmake</code>中为我们提供了搜索或添加文件的命令，可以使用</li><li><code>aux_source_directory</code>命令搜索源文件</li><li><code>include_directories</code>命令添加头文件</li><li><code>file</code>命令搜索匹配文件(可递归)</li></ul><blockquote><p><code>aux_source_directory</code>命令和<code>include_directories</code>命令</p></blockquote><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查找某个路径下的源文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># dir：要搜索的目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># variable：将从dir目录下搜索到的源文件列表存储到该变量中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">aux_source_directory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt; dir &gt; &lt; variable &gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查找某个路径下的头文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">include_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(headpath)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 搜索 src 目录下的源文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">aux_source_directory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/src SRC_LIST)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将 include路径添加为头文件路径</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">include_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/include)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>file</code>命令</p></blockquote><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 搜索文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># GLOB: 将指定目录下搜索</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># GLOB_RECURSE：递归搜索指定目录</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 搜索当前目录的src目录下所有的源文件绝对路径，并存储到变量中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GLOB MAIN_SRC </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/src/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GLOB MAIN_HEAD </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/include/*.h)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="32-字符串操作" tabindex="-1"><a class="header-anchor" href="#32-字符串操作"><span>3.2 字符串操作</span></a></h3><blockquote><p>字符串合并</p></blockquote><ul><li>如果我们通过<code>file</code>命令对各个目录下的源文件进行搜索，最后还需要做一个字符串拼接的操作，关于字符串拼接可以使用<code>set</code>命令也可以使用<code>list</code>命令</li><li><code>list</code>命令的功能比<code>set</code>要强大，字符串拼接只是它的其中一个功能，所以需要在它第一个参数的位置指定出我们要做的操作，<code>APPEND</code>表示进行数据追加，后边的参数和<code>set</code>就一样了</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a 1)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b 2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方法1：使用set拼接</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${a}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> \${b}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># list(APPEND &lt;list&gt; [&lt;element&gt; ...])</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 方法2：使用list拼接</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(APPEND a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${a}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> \${b}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 结果为 1 2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在<code>CMake</code>中，使用<code>set</code>命令可以创建一个<code>list</code>。一个在<code>list</code>内部是一个由分号;分割的一组字符串。例如，<code>set(var a b c d e)</code>命令将会创建一个<code>list:a;b;c;d;e</code>，但是最终打印变量值的时候得到的是<code>abcde</code></li></ul><blockquote><p>字符串移除</p></blockquote><ul><li>我们在通过<code>file</code>搜索某个目录就得到了该目录下所有的源文件，但是其中有些源文件并不是我们所需要的，想要把源文件从搜索到的数据中剔除出去也可以使用<code>list</code>命令</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># list(REMOVE_ITEM &lt;list&gt; &lt;value&gt; [&lt;value&gt; ...])</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 由于获取到的路径是绝对路径，也使用绝对路径过滤</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 移除 main.cpp</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(REMOVE_ITEM SRC_1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/main.cpp)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其他字符串方法</p></blockquote><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 获取 list 的长度。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LENGTH &lt;list&gt; &lt;output variable&gt;)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LENGTH：子命令LENGTH用于读取列表长度</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;list&gt;：当前操作的列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;output variable&gt;：新创建的变量，用于存储列表的长度。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 读取列表中指定索引的的元素，可以指定多个索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GET &lt;list&gt; &lt;element index&gt; [&lt;element index&gt; ...] &lt;output variable&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;list&gt;：当前操作的列表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;element index&gt;：列表元素的索引</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 从0开始编号，索引0的元素为列表中的第一个元素；</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 索引也可以是负数，-1表示列表的最后一个元素，-2表示列表倒数第二个元素，以此类推</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 当索引（不管是正还是负）超过列表的长度，运行会报错</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;output variable&gt;：新创建的变量，存储指定索引元素的返回结果，也是一个列表。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将列表中的元素用连接符（字符串）连接起来组成一个字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (JOIN &lt;list&gt; &lt;glue&gt; &lt;output variable&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;list&gt;：当前操作的列表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;glue&gt;：指定的连接符（字符串）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;output variable&gt;：新创建的变量，存储返回的字符串</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查找列表是否存在指定的元素，若果未找到，返回-1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(FIND &lt;list&gt; &lt;value&gt; &lt;output variable&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;list&gt;：当前操作的列表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;value&gt;：需要再列表中搜索的元素</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;output variable&gt;：新创建的变量</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果列表&lt;list&gt;中存在&lt;value&gt;，那么返回&lt;value&gt;在列表中的索引</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果未找到则返回-1。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将元素追加到列表中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (APPEND &lt;list&gt; [&lt;element&gt; ...])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在list中指定的位置插入若干元素</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(INSERT &lt;list&gt; &lt;element_index&gt; &lt;element&gt; [&lt;element&gt; ...])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将元素插入到列表的0索引位置</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (PREPEND &lt;list&gt; [&lt;element&gt; ...])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将列表中最后元素移除</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (POP_BACK &lt;list&gt; [&lt;out-var&gt;...])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将列表中第一个元素移除</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (POP_FRONT &lt;list&gt; [&lt;out-var&gt;...])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将指定的元素从列表中移除</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (REMOVE_ITEM &lt;list&gt; &lt;value&gt; [&lt;value&gt; ...])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将指定索引的元素从列表中移除</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (REMOVE_AT &lt;list&gt; &lt;index&gt; [&lt;index&gt; ...])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 移除列表中的重复元素</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (REMOVE_DUPLICATES &lt;list&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 列表翻转</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(REVERSE &lt;list&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 列表排序</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (SORT &lt;list&gt; [COMPARE &lt;compare&gt;] [CASE &lt;case&gt;] [ORDER &lt;order&gt;])</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># COMPARE：指定排序方法。有如下几种值可选：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  - STRING:按照字母顺序进行排序，为默认的排序方法</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  - FILE_BASENAME：如果是一系列路径名，会使用basename进行排序</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  - NATURAL：使用自然数顺序排序</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># CASE：指明是否大小写敏感。有如下几种值可选：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  - SENSITIVE: 按照大小写敏感的方式进行排序，为默认值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  - INSENSITIVE：按照大小写不敏感方式进行排序</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ORDER：指明排序的顺序。有如下几种值可选：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  - ASCENDING:按照升序排列，为默认值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  - DESCENDING：按照降序排列</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="33-添加宏定义" tabindex="-1"><a class="header-anchor" href="#33-添加宏定义"><span>3.3 添加宏定义</span></a></h3><ul><li>在进行程序测试的时候，我们可以在代码中添加一些宏定义，通过这些宏来控制这些代码是否生效</li><li>为了让测试更灵活，我们可以不在代码中定义这个宏，而是在测试的时候去把它定义出来 <ul><li>在<code>gcc/g++</code>命令中通过参数 <code>-D</code>指定出要定义的宏的名字，这样就相当于在代码中定义了一个宏</li><li>在<code>CMake</code>中我们也可以做类似的事情，对应的命令叫做<code>add_definitions</code></li></ul></li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># add_definitions(-D宏名称)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 自定义 DEBUG 宏</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_definitions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(-DDEBUG)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="34-流程控制" tabindex="-1"><a class="header-anchor" href="#34-流程控制"><span>3.4 流程控制</span></a></h3><h4 id="341-基本逻辑表达式" tabindex="-1"><a class="header-anchor" href="#341-基本逻辑表达式"><span>3.4.1 基本逻辑表达式</span></a></h4><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># NOT是一个取反操作</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;condition&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果cond1和cond2同时为True，返回True否则返回False</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;cond1&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;cond2&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果cond1和cond2两个条件中至少有一个为True，返回True，否则返回False</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;cond1&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">OR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;cond2&gt;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>比较</p></blockquote><ul><li>基于数值的比较</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># LESS：如果左侧数值小于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># GREATER：如果左侧数值大于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GREATER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># EQUAL：如果左侧数值等于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">EQUAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># LESS_EQUAL：如果左侧数值小于等于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LESS_EQUAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># GREATER_EQUAL：如果左侧数值大于等于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GREATER_EQUAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>基于字符串的比较</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># STRLESS：如果左侧字符串小于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">STRLESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># STRGREATER：如果左侧字符串大于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">STRGREATER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># STREQUAL：如果左侧字符串等于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">STREQUAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># STRLESS_EQUAL：如果左侧字符串小于等于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">STRLESS_EQUAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># STRGREATER_EQUAL：如果左侧字符串大于等于右侧，返回True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">STRGREATER_EQUAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>文件操作</p></blockquote><ul><li>判断文件或者目录是否存在</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#如果文件或者目录存在返回True，否则返回False</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">EXISTS</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-to-file-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">or</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-directory)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断是不是目录</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 此处目录的 path 必须是绝对路径</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果目录存在返回True，目录不存在返回False。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IS_DIRECTORY</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断是不是软连接</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 此处的 file-name 对应的路径必须是绝对路径</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果软链接存在返回True，软链接不存在返回False。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 软链接相当于 Windows 里的快捷方式</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IS_SYMLINK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> file-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断是不是绝对路径</li><li>关于绝对路径: <ul><li>如果是Linux，该路径需要从根目录开始描述</li><li>如果是Windows，该路径需要从盘符开始描述</li></ul></li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果是绝对路径返回True，如果不是绝对路径返回False</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IS_ABSOLUTE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其他</p></blockquote><ul><li>判断某个元素是否在列表中</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">CMake 版本要求：大于等于3.3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">如果这个元素在列表中返回True，否则返回False</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IN_LIST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable&gt;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>比较两个路径是否相等</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">CMake 版本要求：大于等于3.24</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">如果这个元素在列表中返回True，否则返回False</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; PATH_EQUAL &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于路径的比较其实就是另个字符串的比较，如果路径格式书写没有问题也可以通过下面这种方式进行比较：</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">STREQUAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;variable|</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>我们在书写某个路径的时候，可能由于误操作会多写几个分隔符，比如把<code>/a/b/c</code>写成<code>/a//b///c</code>，此时通过<code>STREQUAL</code>对这两个字符串进行比较肯定是不相等的，但是通过<code>PATH_EQUAL</code>去比较两个路径，得到的结果确实相等的</li></ul><h4 id="342-选择判断" tabindex="-1"><a class="header-anchor" href="#342-选择判断"><span>3.4.2 选择判断</span></a></h4><ul><li>基本结构</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;condition&gt;) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 条件一般为逻辑判断结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">elseif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;condition&gt;) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可选快, 可以重复</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()              </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可选快</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="343-循环" tabindex="-1"><a class="header-anchor" href="#343-循环"><span>3.4.3 循环</span></a></h4><blockquote><p>foreach</p></blockquote><ul><li>基本结构</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过foreach我们就可以对items中的数据进行遍历，然后通过loop_var将遍历到的当前的值取出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;loop_var&gt; &lt;items&gt;)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endforeach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>固定次数循环</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># loop_var：存储每次循环取出的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># RANGE：关键字，表示要遍历范围</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># start：这是一个正整数，表示范围的起始值，也就是说最小值为 start</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># stop：这是一个正整数，表示范围的结束值，也就是说最大值为 stop</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># step：控制每次遍历的时候以怎样的步长增长，默认为1，可以不设置</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;loop_var&gt; RANGE &lt;start&gt; &lt;stop&gt; [&lt;step&gt;])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 例子</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item RANGE 10)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 结果从0到10即[0: stop]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(STATUS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;当前遍历的值为: \${item}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endforeach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item RANGE 10 30 2)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    #结果从10到30之间的偶数即[start: stop]，步长为2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(STATUS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;当前遍历的值为: \${item}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endforeach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>遍历列表</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># IN：关键字，表示在 xxx 里边</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># LISTS：关键字，对应的是列表list，通过set、list可以获得</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ITEMS：关键字，对应的也是列表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># loop_var：存储每次循环取出的值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;loop_var&gt; IN [LISTS [&lt;lists&gt;]] [ITEMS [&lt;items&gt;]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 例子</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建 list</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(WORD a b c d)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ace sabo luffy)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 遍历 list</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item IN LISTS WORD </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 结果为两个列表中的所有值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(STATUS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;当前遍历的值为: \${item}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endforeach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 另一种方法，结果相同</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item IN ITEMS </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${WORD}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> \${NAME}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(STATUS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;当前遍历的值为: \${item}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endforeach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>合并遍历</li><li>指定的<code>loop_var</code>个数和含义 <ul><li>如果指定了多个变量名，它们的数量应该和列表的数量相等</li><li>如果只给出了一个 loop_var，那么它将一系列的 loop_var_N 变量来存储对应列表中的当前项，也就是说 loop_var_0 对应第一个列表，loop_var_1 对应第二个列表，以此类推......</li><li>如果遍历的多个列表中一个列表较短，当它遍历完成之后将不会再参与后续的遍历（因为其它列表还没有遍历完），之后结果为空字符串</li></ul></li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># loop_var：存储每次循环取出的值，可以根据要遍历的列表的数量指定多个变量，用于存储对应的列表当前取出的那个值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># IN：关键字，表示在 xxx 里边</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ZIP_LISTS：关键字，对应的是列表list，通过set 、list可以获得</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;loop_var&gt;... IN ZIP_LISTS &lt;lists&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 例子</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过list给列表添加数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(APPEND WORD hello world </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(APPEND </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ace sabo luffy zoro sanji)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 遍历列表</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item1 item2 IN ZIP_LISTS WORD </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(STATUS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;当前遍历的值为: item1 = \${item1}, item2=\${item2}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endforeach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;=============================&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 遍历列表</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(item  IN ZIP_LISTS WORD </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(STATUS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;当前遍历的值为: item1 = \${item_0}, item2=\${item_1}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endforeach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = hello, item2=ace</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = world, item2=sabo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = hello world, item2=luffy</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = , item2=zoro</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = , item2=sanji</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=============================</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = hello, item2=ace</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = world, item2=sabo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = hello world, item2=luffy</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = , item2=zoro</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-- 当前遍历的值为: item1 = , item2=sanji</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>while</p></blockquote><ul><li><code>while</code>的语法格式如下：</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;condition&gt;) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 条件一般为逻辑判断结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;commands&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endwhile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>弹出所有字符串例子</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建一个列表 NAME</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> luffy sanji zoro nami robin)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 得到列表长度</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LENGTH </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> LEN)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 循环</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${LEN}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GREATER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  0)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(STATUS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;names = \${NAME}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 弹出列表头部元素</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(POP_FRONT </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 更新列表长度</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LENGTH </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> LEN)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">endwhile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="4-库文件" tabindex="-1"><a class="header-anchor" href="#4-库文件"><span>4. 库文件</span></a></h2><h3 id="41-制作库文件" tabindex="-1"><a class="header-anchor" href="#41-制作库文件"><span>4.1 制作库文件</span></a></h3><ul><li>在cmake中，如果要制作库，需要使用的命令如下：</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 基本设置</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CALC)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 添加源文件和头文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 静态库</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_library</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(库名称 STATIC 源文件1 [源文件2] ...)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 动态库</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_library</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(库名称 源文件1 [源文件2] ...)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 也可以这样生成动态库</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_library</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(库名称 SHARED 源文件1 [源文件2] ...)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在Linux中，静态库名字分为三部分：lib+库名字+.a，此处只需要指定出库的名字就可以了，另外两部分在生成该文件的时候会自动填充,Windows也是一样</p></blockquote><h3 id="42-使用库文件" tabindex="-1"><a class="header-anchor" href="#42-使用库文件"><span>4.2 使用库文件</span></a></h3><ul><li>添加库存放路径 <ul><li>如果还不知道存放路径，可以通过<code>find /usr -name &#39;库名&#39;</code>查找</li></ul></li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果该静态库不是系统提供的，可能出现静态库找不到的情况</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 此时可以将静态库的路径也指定出来</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ink_directories(&lt;lib </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用静态库文件</p></blockquote><ul><li>连接静态库，静态库会到程序中，连接操作要在生成可执行文件之前</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 参数：指定出要链接的静态库的名字列表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可以是全名 libxxx.a</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 也可以是掐头（lib）去尾（.a）之后的名字 xxx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;static lib&gt; [&lt;static lib&gt;...])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 也可以使用target_link_libraries命令，命令写在生成可执行文件之后</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CALC)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 搜索指定目录下源文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GLOB SRC_LIST </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/src/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 包含头文件路径</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">include_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/include)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 包含静态库路径</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">link_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 链接静态库</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(calc)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生成可执行文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(app </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${SRC_LIST}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用动态库文件</p></blockquote><ul><li>连接动态库，动态库会在需要的时候被加入内存中，连接操作在生成可执行文件之后</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># target：指定要加载动态库的文件的名字</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 该文件可能是一个源文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 该文件可能是一个动态库文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 该文件可能是一个可执行文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># PRIVATE|PUBLIC|INTERFACE：动态库的访问权限，默认为PUBLIC</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;... </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果各个动态库之间没有依赖关系，无需做任何设置，三者没有没有区别，一般无需指定，使用默认的 <code>PUBLIC</code> 即可</li><li>动态库的链接具有传递性，如果动态库 A 链接了动态库B、C，动态库D链接了动态库A，此时动态库D相当于也链接了动态库B、C，并可以使用动态库B、C中定义的方法 <ul><li><code>PUBLIC</code>：在public后面的库会被Link到前面的target中，并且里面的符号也会被导出，提供给第三方使用</li><li><code>PRIVATE</code>：在private后面的库仅被link到前面的target中，不会传递</li><li><code>INTERFACE</code>：在interface后面引入的库不会被链接到前面的target中，只会导出符号，不知道使用的函数来自哪个库</li></ul></li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(VERSION 3.0)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TEST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(GLOB SRC_LIST </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${CMAKE_CURRENT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/*.cpp)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定源文件或者动态库对应的头文件路径</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">include_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/include)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定要链接的动态库的路径</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">link_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 添加并生成一个可执行程序</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(app </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${SRC_LIST}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定要链接的动态库</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(app pthread calc)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="5-嵌套的cmake" tabindex="-1"><a class="header-anchor" href="#5-嵌套的cmake"><span>5. 嵌套的cmake</span></a></h2><h3 id="51-节点关系" tabindex="-1"><a class="header-anchor" href="#51-节点关系"><span>5.1 节点关系</span></a></h3><ul><li>众所周知，<code>Linux</code>的目录是树状结构，所以嵌套的<code>CMake</code>也是一个树状结构，最顶层的<code>CMakeLists.txt</code>是根节点，其次都是子节点。因此，我们需要了解一些关于<code>CMakeLists.txt</code>文件变量作用域的一些信息： <ul><li>根节点<code>CMakeLists.txt</code>中的变量全局有效</li><li>父节点<code>CMakeLists.txt</code>中的变量可以在子节点中使用</li><li>子节点<code>CMakeLists.txt</code>中的变量只能在当前节点中使用</li></ul></li></ul><h3 id="52-添加子目录" tabindex="-1"><a class="header-anchor" href="#52-添加子目录"><span>5.2 添加子目录</span></a></h3><ul><li>可以通过<code>add_subdirectory</code>命令在父目录注册子目录</li></ul><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># source_dir：指定了CMakeLists.txt源文件和代码文件的位置，其实就是指定子目录</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># binary_dir：指定了输出文件的路径，一般不需要指定，忽略即可</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># EXCLUDE_FROM_ALL：在子路径下的目标默认不会被包含到父路径的ALL目标里，并且也会被排除在IDE工程文件之外。用户必须显式构建在子路径下的目标</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_subdirectory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,120)]))}const c=s(t,[["render",h],["__file","cmake.html.vue"]]),r=JSON.parse('{"path":"/note/skill/cmake.html","title":"cmake","lang":"zh-CN","frontmatter":{"description":"cmake cmake 教程 1. 概述 cmake 是一个项目构建工具，并且是跨平台的。关于项目构建我们所熟知的还有Makefile（通过 make 命令进行项目的构建），大多是IDE软件都集成了make，比如：VS 的 nmake、linux 下的 GNU make、Qt 的 qmake等，如果自己动手写 makefile，会发现，makefile...","head":[["meta",{"property":"og:url","content":"https://zwb233.github.io/note-vuepress/note-vuepress/note/skill/cmake.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"cmake"}],["meta",{"property":"og:description","content":"cmake cmake 教程 1. 概述 cmake 是一个项目构建工具，并且是跨平台的。关于项目构建我们所熟知的还有Makefile（通过 make 命令进行项目的构建），大多是IDE软件都集成了make，比如：VS 的 nmake、linux 下的 GNU make、Qt 的 qmake等，如果自己动手写 makefile，会发现，makefile..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cmake\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"12a\\",\\"url\\":\\"/note-vuepress/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"1. 概述","slug":"1-概述","link":"#1-概述","children":[]},{"level":2,"title":"2. 语法","slug":"2-语法","link":"#2-语法","children":[{"level":3,"title":"2.1 常见文档内容","slug":"21-常见文档内容","link":"#21-常见文档内容","children":[]},{"level":3,"title":"2.2 定义变量","slug":"22-定义变量","link":"#22-定义变量","children":[]},{"level":3,"title":"2.3 cmake内置变量","slug":"23-cmake内置变量","link":"#23-cmake内置变量","children":[]}]},{"level":2,"title":"3. 常用操作","slug":"3-常用操作","link":"#3-常用操作","children":[{"level":3,"title":"3.1 批量添加源文件和头文件","slug":"31-批量添加源文件和头文件","link":"#31-批量添加源文件和头文件","children":[]},{"level":3,"title":"3.2 字符串操作","slug":"32-字符串操作","link":"#32-字符串操作","children":[]},{"level":3,"title":"3.3 添加宏定义","slug":"33-添加宏定义","link":"#33-添加宏定义","children":[]},{"level":3,"title":"3.4 流程控制","slug":"34-流程控制","link":"#34-流程控制","children":[]}]},{"level":2,"title":"4. 库文件","slug":"4-库文件","link":"#4-库文件","children":[{"level":3,"title":"4.1 制作库文件","slug":"41-制作库文件","link":"#41-制作库文件","children":[]},{"level":3,"title":"4.2 使用库文件","slug":"42-使用库文件","link":"#42-使用库文件","children":[]}]},{"level":2,"title":"5. 嵌套的cmake","slug":"5-嵌套的cmake","link":"#5-嵌套的cmake","children":[{"level":3,"title":"5.1 节点关系","slug":"51-节点关系","link":"#51-节点关系","children":[]},{"level":3,"title":"5.2 添加子目录","slug":"52-添加子目录","link":"#52-添加子目录","children":[]}]}],"readingTime":{"minutes":20.44,"words":6131},"filePathRelative":"note/skill/cmake.md","excerpt":"\\n<ul>\\n<li><a href=\\"https://subingwen.cn/tags/cmake/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">cmake 教程</a></li>\\n</ul>\\n<h2>1. 概述</h2>\\n<ul>\\n<li>\\n<p>cmake 是一个项目构建工具，并且是跨平台的。关于项目构建我们所熟知的还有Makefile（通过 make 命令进行项目的构建），大多是IDE软件都集成了make，比如：VS 的 nmake、linux 下的 GNU make、Qt 的 qmake等，如果自己动手写 makefile，会发现，makefile 通常依赖于当前的编译平台，而且编写 makefile 的工作量比较大，解决依赖关系时也容易出错。</p>\\n</li>\\n<li>\\n<p>cmake 允许开发者指定整个工程的编译流程，根据编译平台，自动生成本地化的Makefile和工程文件，最后用户只需make编译即可，所以可以把cmake看成一款自动生成 Makefile的工具，其编译流程如下图：\\n</p>\\n<ul>\\n<li>蓝色虚线表示使用makefile构建项目的过程</li>\\n<li>红色实线表示使用cmake构建项目的过程</li>\\n</ul>\\n</li>\\n<li>\\n<p>介绍完cmake的作用之后，再来总结一下它的优点：</p>\\n<ul>\\n<li>跨平台</li>\\n<li>能够管理大型项目</li>\\n<li>简化编译构建过程和编译过程</li>\\n<li>可扩展：可以为 cmake 编写特定功能的模块，扩充 cmake 功能</li>\\n</ul>\\n</li>\\n<li>\\n<p>执行<code>cmake</code></p>\\n<ul>\\n<li><code>cmake</code>默认在本目录下寻找<code>cmakeLists.txt</code>执行</li>\\n<li>执行<code>cmake</code>会在当前目录下生成大量文件，因此一般使用指定路径的形式执行，将生成内容和代码分开存放</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,r as data};
