import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as r,o as l}from"./app-C95VGJ3p.js";const i="/note-vuepress/assets/image-DidjUCax.png",a="/note-vuepress/assets/image-cjPwcCfS.png",s={};function o(p,e){return l(),n("div",null,e[0]||(e[0]=[r('<h1 id="todo" tabindex="-1"><a class="header-anchor" href="#todo"><span>TODO</span></a></h1><ul><li>结构 <ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 哈希表和哈希集合(如果是数字索引,考虑数组优化,如果存储在表中的是长度为2或3的数组,考虑使用多个数组优化时间)</label></li><li>有序集合TreeSet</li><li>字典树</li><li>内向基环树</li><li><strong>dfs和bfs</strong></li><li>栈和队列:<a href="https://blog.csdn.net/qq_53373885/article/details/128305313" target="_blank" rel="noopener noreferrer">说明</a>,简单的使用数组实现 <ul><li><strong>单调栈和单调队列</strong></li></ul></li><li><strong>大根堆和小根堆</strong>(包括使用long的写法区别, PriorityQueue&lt;Long&gt; priorityQueue = new PriorityQueue&lt;&gt;((o1,o2)-&gt;{ if (o2 - o1 &gt; 0) return 1; if (o2.equals(o1)) return 0; return -1; })😉</li><li>红黑树</li><li><strong>滑动窗口和双指针</strong></li><li>排序算法</li><li>线段树</li><li>树状数组</li><li><strong>前缀和</strong>和<a href="https://leetcode.cn/problems/car-pooling/solutions/2550276/gong-shui-san-xie-tu-jie-chai-fen-ru-men-opii/" target="_blank" rel="noopener noreferrer">差分数组</a><img src="'+i+'" alt="选择" loading="lazy"></li><li><strong>并查集</strong></li><li>链表:快慢指针</li><li>分组循环 <img src="'+a+'" alt="分组循环" loading="lazy"></li><li>位运算优化</li><li>博弈论</li><li>数学 <ul><li>获取包括数组某个树在内且该数作为最小值的连续子数组总数 <a href="https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/description/" target="_blank" rel="noopener noreferrer">Leetcode 828. 统计子串中的唯一字符</a></li></ul></li><li>树</li><li>图论 <ul><li>最大流问题/最小费用网络流问题/二分图问题</li></ul></li></ul></li><li>方法: <ul><li>枚举</li><li>递归分治</li><li>动态规划, 记忆化搜索(正向,逆向)</li><li>模拟退火</li><li>贪心</li><li>回溯</li><li>模拟</li><li>数位dp</li><li>图的操作:图的求最短路和最小生成树经典算法及相关优化(prim算法等,dijkstra可用优先队列优化,Bella-Ford在一定情况下可转为spfa代替) <a href="https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/description/" target="_blank" rel="noopener noreferrer">Leetcode 1334. 阈值距离内邻居最少的城市</a>,<a href="https://blog.csdn.net/shenben1010/article/details/128269758" target="_blank" rel="noopener noreferrer">最短路径问题补充</a>,<a href="https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/solutions/2526052/gong-shui-san-xie-han-gai-suo-you-cun-tu-svq7/" target="_blank" rel="noopener noreferrer">图的表示方法</a></li></ul></li><li>常用操作及相关优化 <ul><li>字符串遍历<a href="https://leetcode.cn/problems/determine-if-two-strings-are-close/solutions/2547579/li-jie-cao-zuo-ben-zhi-jian-ji-xie-fa-py-b18i/" target="_blank" rel="noopener noreferrer">java优化</a>, 字符串修改(使用string.toCharArray进行原地修改之后使用构造函数,使用StringBuilder修改,不拼接使用第一种就好,其他语言无第二种方案,c++可直接修改string,其他语言转为char数组后重新拼接)</li><li>自定义排序方法</li><li>获得比一个正数大一点的第一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>的值</li><li>x&amp;(-x)获取二进制最低位</li><li>x&amp;=x-1消去二进制最低位</li><li>其他位运算<img src="https://pic.leetcode.cn/1686879866-VArRlW-Binar_Fundamentals_00.png" alt="图" loading="lazy"></li><li>判断是否为素数</li><li>求最大公约数</li><li>Gosper_Hack得到其k个比特位为1的所有排列组合</li></ul></li><li>参考: <ul><li>神经网络:<a href="https://space.bilibili.com/1369507485" target="_blank" rel="noopener noreferrer">ShusenWang</a>和d2l</li><li>大部分算法源码:<a href="https://github.com/williamfiset/algorithms" target="_blank" rel="noopener noreferrer">williamfiset</a></li></ul></li><li>题目: <ul><li><a href="https://leetcode.cn/problems/path-with-minimum-effort/description/" target="_blank" rel="noopener noreferrer">1631. 最小体力消耗路径</a>,二分, 并查集, 最短路径</li><li><a href="https://leetcode.cn/problems/next-greater-element-iv/description/" target="_blank" rel="noopener noreferrer">2454. 下一个更大元素 IV</a>,单调栈, 排序后有序集合</li><li><a href="https://leetcode.cn/problems/minimum-time-to-make-array-sum-at-most-x/description/" target="_blank" rel="noopener noreferrer">2809. 使数组和小于等于 x 的最少时间</a>,动态规划</li><li><a href="https://leetcode.cn/problems/maximum-number-of-alloys/description/" target="_blank" rel="noopener noreferrer">2861. 最大合金数</a></li><li><a href="https://leetcode.cn/problems/find-the-longest-equal-subarray/description/" target="_blank" rel="noopener noreferrer">2831. 找出最长等值子数组</a>,滑动窗口</li><li><a href="https://leetcode.cn/problems/visit-array-positions-to-maximize-score/description/" target="_blank" rel="noopener noreferrer">2786. 访问数组中的位置使分数最大</a>,动态规划</li><li><a href="https://leetcode.cn/problems/maximum-beauty-of-an-array-after-applying-operation/description/" target="_blank" rel="noopener noreferrer">2779. 数组的最大美丽值</a></li><li><a href="https://leetcode.cn/problems/minimum-array-end/description/" target="_blank" rel="noopener noreferrer">3133. 数组最后一个元素的最小值</a>,位运算</li><li><a href="https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/description/" target="_blank" rel="noopener noreferrer">698. 划分为k个相等的子集</a>,动态规划, 模拟退火</li><li><a href="https://leetcode.cn/problems/find-the-maximum-length-of-a-good-subsequence-i/description/" target="_blank" rel="noopener noreferrer">3176. 求出最长好子序列 I</a>,动态规划</li><li><a href="https://leetcode.cn/problems/count-increasing-quadruplets/description/" target="_blank" rel="noopener noreferrer">2552. 统计上升四元组</a>,枚举</li><li><a href="https://leetcode.cn/problems/maximize-win-from-two-segments/description" target="_blank" rel="noopener noreferrer">2555. 两个线段获得的最多奖品</a>,二分查找,双指针枚举+动态规划</li><li><a href="https://leetcode.cn/problems/count-special-integers/description/" target="_blank" rel="noopener noreferrer">2376. 统计特殊整数</a>,动态规划</li><li><a href="https://leetcode.cn/problems/minimum-cost-to-reach-destination-in-time/description/" target="_blank" rel="noopener noreferrer">1928. 规定时间内到达终点的最小花费</a>，动态规划，图</li></ul></li></ul>',2)]))}const h=t(s,[["render",o],["__file","todo.html.vue"]]),g=JSON.parse('{"path":"/note/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/todo.html","title":"TODO","lang":"zh-CN","frontmatter":{"description":"TODO 结构 哈希表和哈希集合(如果是数字索引,考虑数组优化,如果存储在表中的是长度为2或3的数组,考虑使用多个数组优化时间) 有序集合TreeSet 字典树 内向基环树 dfs和bfs 栈和队列:说明,简单的使用数组实现 单调栈和单调队列 大根堆和小根堆(包括使用long的写法区别, PriorityQueue<Long> priorityQueu...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/note-vuepress/note/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/todo.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"TODO"}],["meta",{"property":"og:description","content":"TODO 结构 哈希表和哈希集合(如果是数字索引,考虑数组优化,如果存储在表中的是长度为2或3的数组,考虑使用多个数组优化时间) 有序集合TreeSet 字典树 内向基环树 dfs和bfs 栈和队列:说明,简单的使用数组实现 单调栈和单调队列 大根堆和小根堆(包括使用long的写法区别, PriorityQueue<Long> priorityQueu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.leetcode.cn/1686879866-VArRlW-Binar_Fundamentals_00.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TODO\\",\\"image\\":[\\"https://pic.leetcode.cn/1686879866-VArRlW-Binar_Fundamentals_00.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"readingTime":{"minutes":3.19,"words":956},"filePathRelative":"note/算法设计/todo.md","excerpt":"\\n<ul>\\n<li>结构\\n<ul class=\\"task-list-container\\">\\n<li class=\\"task-list-item\\"><input type=\\"checkbox\\" class=\\"task-list-item-checkbox\\" id=\\"task-item-0\\" checked=\\"checked\\" disabled=\\"disabled\\"><label class=\\"task-list-item-label\\" for=\\"task-item-0\\"> 哈希表和哈希集合(如果是数字索引,考虑数组优化,如果存储在表中的是长度为2或3的数组,考虑使用多个数组优化时间)</label></li>\\n<li>有序集合TreeSet</li>\\n<li>字典树</li>\\n<li>内向基环树</li>\\n<li><strong>dfs和bfs</strong></li>\\n<li>栈和队列:<a href=\\"https://blog.csdn.net/qq_53373885/article/details/128305313\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">说明</a>,简单的使用数组实现\\n<ul>\\n<li><strong>单调栈和单调队列</strong></li>\\n</ul>\\n</li>\\n<li><strong>大根堆和小根堆</strong>(包括使用long的写法区别,        PriorityQueue&lt;Long&gt; priorityQueue = new PriorityQueue&lt;&gt;((o1,o2)-&gt;{\\nif (o2 - o1 &gt; 0) return 1;\\nif (o2.equals(o1)) return 0;\\nreturn -1;\\n})😉</li>\\n<li>红黑树</li>\\n<li><strong>滑动窗口和双指针</strong></li>\\n<li>排序算法</li>\\n<li>线段树</li>\\n<li>树状数组</li>\\n<li><strong>前缀和</strong>和<a href=\\"https://leetcode.cn/problems/car-pooling/solutions/2550276/gong-shui-san-xie-tu-jie-chai-fen-ru-men-opii/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">差分数组</a>\\n</li>\\n<li><strong>并查集</strong></li>\\n<li>链表:快慢指针</li>\\n<li>分组循环\\n</li>\\n<li>位运算优化</li>\\n<li>博弈论</li>\\n<li>数学\\n<ul>\\n<li>获取包括数组某个树在内且该数作为最小值的连续子数组总数 <a href=\\"https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Leetcode 828. 统计子串中的唯一字符</a></li>\\n</ul>\\n</li>\\n<li>树</li>\\n<li>图论\\n<ul>\\n<li>最大流问题/最小费用网络流问题/二分图问题</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>方法:\\n<ul>\\n<li>枚举</li>\\n<li>递归分治</li>\\n<li>动态规划, 记忆化搜索(正向,逆向)</li>\\n<li>模拟退火</li>\\n<li>贪心</li>\\n<li>回溯</li>\\n<li>模拟</li>\\n<li>数位dp</li>\\n<li>图的操作:图的求最短路和最小生成树经典算法及相关优化(prim算法等,dijkstra可用优先队列优化,Bella-Ford在一定情况下可转为spfa代替) <a href=\\"https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Leetcode 1334. 阈值距离内邻居最少的城市</a>,<a href=\\"https://blog.csdn.net/shenben1010/article/details/128269758\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">最短路径问题补充</a>,<a href=\\"https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/solutions/2526052/gong-shui-san-xie-han-gai-suo-you-cun-tu-svq7/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">图的表示方法</a></li>\\n</ul>\\n</li>\\n<li>常用操作及相关优化\\n<ul>\\n<li>字符串遍历<a href=\\"https://leetcode.cn/problems/determine-if-two-strings-are-close/solutions/2547579/li-jie-cao-zuo-ben-zhi-jian-ji-xie-fa-py-b18i/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">java优化</a>, 字符串修改(使用string.toCharArray进行原地修改之后使用构造函数,使用StringBuilder修改,不拼接使用第一种就好,其他语言无第二种方案,c++可直接修改string,其他语言转为char数组后重新拼接)</li>\\n<li>自定义排序方法</li>\\n<li>获得比一个正数大一点的第一个<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\\"application/x-tex\\">2^n</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6644em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">2</span><span class=\\"msupsub\\"><span class=\\"vlist-t\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:0.6644em;\\"><span style=\\"top:-3.063em;margin-right:0.05em;\\"><span class=\\"pstrut\\" style=\\"height:2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mathnormal mtight\\">n</span></span></span></span></span></span></span></span></span></span></span>的值</li>\\n<li>x&amp;(-x)获取二进制最低位</li>\\n<li>x&amp;=x-1消去二进制最低位</li>\\n<li>其他位运算<img src=\\"https://pic.leetcode.cn/1686879866-VArRlW-Binar_Fundamentals_00.png\\" alt=\\"图\\" loading=\\"lazy\\"></li>\\n<li>判断是否为素数</li>\\n<li>求最大公约数</li>\\n<li>Gosper_Hack得到其k个比特位为1的所有排列组合</li>\\n</ul>\\n</li>\\n<li>参考:\\n<ul>\\n<li>神经网络:<a href=\\"https://space.bilibili.com/1369507485\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ShusenWang</a>和d2l</li>\\n<li>大部分算法源码:<a href=\\"https://github.com/williamfiset/algorithms\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">williamfiset</a></li>\\n</ul>\\n</li>\\n<li>题目:\\n<ul>\\n<li><a href=\\"https://leetcode.cn/problems/path-with-minimum-effort/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">1631. 最小体力消耗路径</a>,二分, 并查集, 最短路径</li>\\n<li><a href=\\"https://leetcode.cn/problems/next-greater-element-iv/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2454. 下一个更大元素 IV</a>,单调栈, 排序后有序集合</li>\\n<li><a href=\\"https://leetcode.cn/problems/minimum-time-to-make-array-sum-at-most-x/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2809. 使数组和小于等于 x 的最少时间</a>,动态规划</li>\\n<li><a href=\\"https://leetcode.cn/problems/maximum-number-of-alloys/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2861. 最大合金数</a></li>\\n<li><a href=\\"https://leetcode.cn/problems/find-the-longest-equal-subarray/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2831. 找出最长等值子数组</a>,滑动窗口</li>\\n<li><a href=\\"https://leetcode.cn/problems/visit-array-positions-to-maximize-score/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2786. 访问数组中的位置使分数最大</a>,动态规划</li>\\n<li><a href=\\"https://leetcode.cn/problems/maximum-beauty-of-an-array-after-applying-operation/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2779. 数组的最大美丽值</a></li>\\n<li><a href=\\"https://leetcode.cn/problems/minimum-array-end/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">3133. 数组最后一个元素的最小值</a>,位运算</li>\\n<li><a href=\\"https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">698. 划分为k个相等的子集</a>,动态规划, 模拟退火</li>\\n<li><a href=\\"https://leetcode.cn/problems/find-the-maximum-length-of-a-good-subsequence-i/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">3176. 求出最长好子序列 I</a>,动态规划</li>\\n<li><a href=\\"https://leetcode.cn/problems/count-increasing-quadruplets/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2552. 统计上升四元组</a>,枚举</li>\\n<li><a href=\\"https://leetcode.cn/problems/maximize-win-from-two-segments/description\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2555. 两个线段获得的最多奖品</a>,二分查找,双指针枚举+动态规划</li>\\n<li><a href=\\"https://leetcode.cn/problems/count-special-integers/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2376. 统计特殊整数</a>,动态规划</li>\\n<li><a href=\\"https://leetcode.cn/problems/minimum-cost-to-reach-destination-in-time/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">1928. 规定时间内到达终点的最小花费</a>，动态规划，图</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{h as comp,g as data};
